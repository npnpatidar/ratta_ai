import json
import os
import yaml
import re
import csv
import random
import g4f
import docx2txt 
import pypandoc
import docx
import ratta_functions
from difflib import SequenceMatcher
import pypandoc
import docx
from docx2html import segregate_question , get_initial_idea_of_files_from_a_folder_recursively


input_folder = "/home/naresh/Work/Working/input"
output_folder = "/home/naresh/Work/Working/output"

sabhyata_guide_line = {
   
    "सुनारी":["सुनारी"],
    "गिलुण्ड":["गिलुण्ड" , "गिलूण्ड"],
    "जोधपुरा":["जोधपुरा"],
    "नोह":    ["नोह", "नौह"],
    "ईसवाल":    ["ईसवाल"],
    "ओझियाना":   ["ओझियाना"],
    "बालाथल":    ["बालाथल"],
    "रैढ़":["रैढ़" , "रैद़"],
    "नगरी":["नगरी" ], #, "नगर"
    "नालियासर":["नालियासर"],
    "रंगमहल":["रंगमहल"],
             "गणेश्वर":["गणेश्वर", "गणेश्बर" , "गणेशवर"],
      "बागोर":["बागोर" , "बागौर"],
     "बैराठ":["बैराठ"],
    "कालीबंगा":["कालीबंगा",  "अमलानंद"],
    "आहड़":["आहड़" , "आहाड़" , "आहड", "आह्ड" , "बनास" , "अहाड़"],
}




lokdevta_devia = {
        "लोक देवी" : ["लोक देवी", "देवी" , "माता"],
    "लोक देवता" : ["लोक देवता", "देवता" , "गोगा", "तेजा", "मल्ली", "रामदेव" , "पाबू" , "जाम्भो"],

    "संत- संप्रदाय":["संत" , "संप्रदाय" , "पंथ" , "सम्प्रदाय" , "सन्त" , "सम्र्रदाय" , "सूफी" , "बाबा" , "पीर" , "दादू", "बालिन्दजी"]
}


mele_tyohar = {
    "मेले":["मेले", "मेला", "मेलों" , "उत्सव", "महोत्सव"],
    "त्योहार": ["त्योहार" , "त्यौहार"]
}





sahitya  ={
    "भाषा" :["भाषा" , "बोली" , "बोलि" , "अहीरवाटी"],
    "साहित्य": ["साहित्य" , "कृति" , "ग्रन्थ" , "लेख"  , "रच" , "कवि","संग्रह" , "पुस्तक" , "ख्यात", "संकलन" , "देवीप्रसाद" , "पोथीखाना" , "रासो" , "मिश्रण" , "नैणसी", "वचनिका"],  #, "लिख"
    "समाचार पत्र":["समाचार" , "पत्र" , "प्रेस" , "छापाखाना", "संपाद"]
} 


veshbhusha = {
    "वस्त्र":["वस्त्र" , "पहनावा" , "वेशभूषा" , "ओढ" , "पोशाक" , "पोमचा", "कपड़े" , "साड़ी" , "पगड" , "औढ" , "परिधान"],
    "आभूषण":["आभ"  , "नाक" , "कान" , "गला" , "कमर" , "गहन" , "गले"],
    "रीति":["रीति", "रिवाज", "परम्परा", "प्रथा" , " संस्कार" , "अवसर", "संस्कृति"  , "त्योहार" , "विवाह" , "रस्म" , " शुक्ल" , "कृष्ण" , "फड़" , "सम्बोधन" , "नाश्ता"]
}



# vyaktitya = {
    # "महिला":["महिला" , "पत्नी" , "बालिका" , "वधु" , "पुत्री" , "बहू" , "कुमारी" , "श्रीमती" , "महारानी" , "पौत्री" , "नेत्री" , "बेन" , " बहन" , "देवी"]
    # "स्वतंत्रता सेनानी" :["स्वतंत्रता सेनानी"]
# }


kalaye = {
    "चित्रकला":["चित्रकला" , "चित्र"  , "पेंटिंग"],
    "हस्तकला": ["हस्तकला" , "प्रिन्ट" , "प्रिंट" , "साफा", "साड़ी" , "कढ़ाई" , "हस्तशिल्प" , "पॉटरी" , "पॉटरी" , "बंधेज" , "मीनाकारी" , "परदे" , "कोफ्तगिरी" , "खिलौंने" , "तीर" , "छपाई"]
}


janjagaran = {
    "1857":["1857" , "आऊवा" , "बर्टन" ],
    "क्रांतिकारी":["सचिन्द्र" , "बिहारी" , "डकैती" , "हत्या" , "बारहठ" , " खरवा" , "श्यामजी" , "भवानी सहाय" , "क्रांति" , "क्रान्ति"],
    "संगठन":["सभा" , "आश्रम", "सेवा" , "विद्यापीठ" ,"परिष" , "समिति" , "संगठन" , "मण्डल" , "संस्था" , "वनस्थली" , "संघ" , "राजपूताना मध्य भारत"],
    "समाचार": ["समाचार" , "पत्र" , "पत्रिका" , "अखबार" ,  "प्रेस" , "छापाखाना", "संपाद", "पुस्तक",  "ग्रंथ", "लेख"], #"लिख" ,
    "सुधार":["हितकारिणी", "सरस्वती" , "दयानंद" , "दयानन्द" , "प्रथा" , "प्रधा","बालविवाह" , "बाल विवाह" , "कन्या वध" , "शिक्षा" , "कॉलेज" , "स्कूल" , "प्रतिबंध" , "आर्य समाज" , "कुरीति" , "विधवा" , "परोपकारिणी"],
    "ब्रिटिश":["बटालियन", "ब्रिटिश" , "दरबार" , "लॉर्ड" , "अंग्रेज" , "संधि" , "पॉलिटिकल", "एजेंट" , " विक्टोरिया" , "मेजर" , "चेम्बर" , "चैम्बर", "एजेन्ट" , "लार्ड"  , "वेल्स" ],
}

sikke_lekh = {
      "सिक्के":["सिक्क" , "मुद्रा" , "रूपया", "रुपया" , "टकसाल"],
 "लेख" : ["लेख" , "प्रशस्ति" , "ताम्रपत्र" , "बहियाँ" , "पत्र" , "स्तम्भ" , "ताम्रपत्र" , "आदेश" , "रिपोर्ट"],
#   "इतिहास के स्त्रोत, पुरातात्विक स्थल व अन्य ":["पुरात" ],
}

raajvansh = {
    "राजवंश":["वंश"],
    "युद्ध":["युद्ध"],
    "मराठा":["मराठा" , "हुरड़ा"]
}
# combined_json = {  **sabhyata_guide_line , **sikke_lekh , **stapathya , **janjagaran, **veshbhusha , **sahitya , **natya_vadya_ , **kalaye , **mele_tyohar , **lokdevta_devia , **raajvansh}
# print(combined_json)

test = {
    # "गुर्जर-प्रतिहार":["गुर्जर" , "प्रतिहार" , "नागभट्ट" , "वत्सराज" , "मिहिर"]
    # "Ranthambhore - Delhi Sultanate Relations":["साका" , "इल्तुतमिश" , "खिलजी" , "आक्रमण"]
#     "jhalawar":["झाला" , "जालिम" ],
#     "Chauhans of Bundi" :["बूंदी" ,"बूँदी"],
#     "कोटा का इतिहास": ["कोटा" , "हाड़ौत"],
#     "यादव":["यादव", "करौली"],
#         "जैसलमेर का भाटी राजवंश":["जैसलमेर", "भाटी"], 

#     "डूंगरपुर":["डूंगरपुर", "दूंगरपुर", "डूंगरपूर", ],
#     "बाँसवाड़ा":["बाँसवाड़ा","बांसवाड़ा" ],
#     "प्रतापगढ़":["प्रतापगढ़"],
#         "वागड़":["वागड़" ,"बागड़", "डूंगरपुर" , "बाँसवाड़ा" , "प्रतापगढ़" , "दूंगरपुर" , "बांसवाड़ा" , "डूंगरपूर"],
#     "टोंक":["टोंक",  "टॉक"],
#     "परमार":["परमार"  ,"आबू"],
#     "अलवर":["अलवर"],
#     "मेवाड़":["मेवाड़" , "सांगा", "साँगा", "सिसोदिया", "गुहिल" , "हल्दीघाटी" , "खानवा" , "दिवेर" , "महाराणा" , "बाबर" , "प्रताप"],
#     "मारवाड़":["मारवाड़" , "सुमेल"],
#     "कछवाहा":["कछवाहा" , "आमेर" , "मिर्जा"],
# "Chauhans of Ajmer":["पृथ्वीराज चौहान" , "तराइन" , "गौरी"],
#     "शेखावाटी":["शेखावाट"],
#     "किशनगढ़":["किशनगढ़", "सावंत सिंह"],
#     "शाहपुरा":["शाहपुरा"],
#     "भीनमाल":["भीनमाल"],
#         "वरीक":["वरीक" , "वरिक"],
        # "अन्य प्रश्न":[""]

# "mansingh":["मानसिंह", "मान सिंह"],
# "कछवाहों का इतिहास ":[""]


# "bikaner":["बीकानेर"]
# "Mughal - Chandrasen Relations" :["चन्द्रसेन"]
# "रायसिंह":["रायसिंह", "राय सिंह"]

# "मुगल संबंध":["बाबर", "मुगल" , "दिवेर","अकबर" , "मनसब", "जहाँगीर" , "बंगाल" , "कामरान" , "सलीम", "हल्दीघाटी", "खानवा", "औरंगजेब", "शाहजहाँ"],
# "Mewar Relations with Delhi Sultanate":["1303","खिलजी", "अलाउद्दीन" , "लोदी" , "इल्तुतमिश" , "दिल्ली" , "खातोली" , "भूताला" , "तुगलक" , "सुल्तान"]
"Mughal- Raj Singh":["राज सिंह", "राजसिंह"],
"Mughal- Rana Pratap":["प्रताप" , "हल्दीघाटी" , "दिवेर" , "हल्दघाटी" , "हल्दीयाटी"],
"Mughal - Sanga":["सांगा" , "खानवा", " संग्राम", "राणा संगा"],
"Mughal - Udai Singh":["उदयसिंह", "उदय सिंह", "जयमल" , "फत्ता"],
"Mughal - Amar Singh":["अमरसिंह", "अमर सिंह" , "कर्ण"],
"अन्य":[""]
}



natya_vadya_ ={
    "नाट्य":["नाट्य" , "ख्याल", "नाटक", "नौटंकी"],
    "वाद्य":["वाद्य", "हत्था" , "सारंगी"],
    "गीत":["गीत", "गायन" ,"गायक" , "राग" , "गायिका" , "मीरा"],
    "नृत्य":["नृत्य"],
    # "अन्य":["संस्थान"]
}

janjati = {
    # "जनजाती":["जनजात" , "भील", "गरासिया" , "ग़रासिया" , "आदिवासी" , "मीणा" , "डामोर" , "सहरिया" , "कंजर", "कत्था" , "कथौड़ी"],
    # "प्रथा":["प्रथा"]
    # "durg":["दुर्ग" , "किले" , "किला" , "किलों"]

}

stapathya = {
    "महल": ["महल" , "प्रासाद" , "पैलेस"],
    "छतरियां":["छतरी" , "छतरि" ],
    "हवेली":["हवेली" , "हवेलि" , "कोठी"],
    "मंदिर":["मंदिर" , "मन्दिर" , "साल"],
    "बावडीयां":["बावडी" , "बावड़ी" , "कुंड"],
    "दरगाह":["दरगाह", "मकबरा" , "मस्जिद" , "मजार" , "मजिस्द" , "ख्वाजा"],
    "किले": ["किला", "किले" , "दुर्ग" , "दर्ग" , "प्राचीर" , "नाहरगढ़" , "किलों"],
    "अन्य स्थापत्य कला":["स्तम्भ" , "स्मारक" , "संग्रहालय" , "गुरुद्वारा" , "संस्थान" , "आश्रम" , "पीठ" , "वेधशाला" , "पार्क" , "म्यूजियम" , "गुफा" , "हॉल" , "बाग"]
}






jhile_bavadiya = {
    "झील":["झील" ,"सॉल्ट", "सांभर", "गढीसर" , "पचपदरा" ,"राज प्रशस्ति", "पुष्कर" ,"रामगढ़", "डीडवाना" , "गैब सागर"   ],
    "बावड़ी":["बावड़ी", "बावड़ि" , "बावडी" , "कुआँ", "बाव"],
    "नदी":["नदी", "नदि"],
    "अन्य" :["नहर" ,"जोहड़" , "झालरा" , "नाला", "कुण्ड", "तालाब" , "बांध" , ""],

}





mitti = {
    "मरुस्थलीकरण":["मरुस्थल", "मरूस्थल"],
    "अपरदन":["अपरदन"],
    "मिट्टी" :["मिट्टी" ,"मिट्टि", "मृदा"]
}


urja = {
    "सौर":["सौर", "सोलर"],
    "वायु":["वायु" , "पवन"],
    "तापीय":["ताप" , "थर्मल" , "धर्मल", "लिग्नाइट"],
    "जैव ईंधन":["जैव" , "बायोमास", "सरसों", "बायो ऊर्जा"],
    "परमाणु":["परमाणु" , "नाभिक", "न्यूक्लियर", "आण्विक"], 
    "गैस":["गैस"],
    "अक्षय":["अक्षय" , "रिन्यूअबल", "REDA"],
    "जल विद्युत":["जल", "माही" , "व्यास", "भाखड़ा", "चम्बल" , "सागर", "बाँध"]

}


jalavayu ={

"कृषि जलवायु":["कृषि जलवाय", "कृषि-जलवाय"],
    "मानसून":["मानसून" , "वर्षा"],
        "कोपेन":["उष्ण कटिबंध","उपआर्द्र जलवायु","अर्द्धशुष्क","अतिआर्द्र जलवाय","उप आर्द्र जलवाय", "स्टेपी जलवाय","अति आर्द्र", "अर्द्ध-शुष्क",  "कोपेन", "कोपन",  "Bs","BS", "Aw" ,"AW", "CW","Cw", "Bw", "BW", "मौसम विभाग", "थोर्नवेट", "थॉर्नवेट", "थार्नवेट", "ट्रिवार्था", "द्रिवार्था", "EA'd"],

    


    # "तापमान":["तापमान" , "ताप"],
    "जलवायु":["जलवायु" , ""]
}


van = {
    "रिपोर्ट":[ "रिपोर्ट", "2019" , "2020" , "2021" , "2022" , "2023", "2024", "2018", "2017", "2016" ],
    "विभाग और परियोजना":["विभाग" , "संस्थान", "AFRI", "सर्वेक्षण" , "प्राधिकरण" , "महाविद्यालय" , "पुरस्कार" , "परियोजना" , "अधिनियम" , "योजना", "कार्यक्रम" , "नीति"]
}


jiv = {

    "टाईगर":["टाईगर" ,"बाघ" , "टाइगर"],


    "राष्ट्रीय उद्यान":["राष्ट्रीय उद्यान"],
        "पार्क":["पार्क", "उद्यान"],
    # "संग्रहालय":["संग्रहालय"],
    # "आखेट":["आखेट"],
    "कन्जर्वेशन रिजर्व":["कन्जर्वेशन रिजर्व" , "संरक्षित क्षेत्र"],

        # "जन्तुआलय":["जन्तुआलय", "जन्तु आलय"],
        # "मृगवन":["मृगवन"],
        # "पक्षी विहार":["पक्षी विहार"],
        "शुभंकर":["शुभंकर" , "जिले का वन्यजीव"],
        # "दिवस":["दिवस"],
                "अभयारण्य":["अभयारण्य" , "अभ्यारण्य"],
                "वन्य जीव":["वन्यजीव" , ""]
}





# khanij = {
#     "संगमरमर": ["संगमरमर", "मार्बल"],
#     "ग्रेनाइट": ["ग्रेनाइट" , "ग्रेनाईट"],
#     "चूना पत्थर": ["चूना पत्थर", "चूने" ,     "लाइम स्टोन",     "लाइमस्टोन"],
#     "पाइराइट्स": ["पाइराइट्स"],
#     "तेल भंडार": ["तेल", "ऑयल" , "पेट्रोलियम"],
#     "कोयला": ["कोयला"],
#     "गैस": ["मीथेन" , "गैस"],
#     "रॉक फॉस्फेट": ["रॉक फॉस्फेट", "रॉक-फॉस्फेट", "रॉक फास्फेट"],
#     "जिप्सम": ["जिप्सम"],
#     "टंगस्टन": ["टंगस्टन"],

#     "घीया पत्थर":["घीया पत्थर", "सोप स्टोन"],
#     "फ्लोर्सपार": ["फ्लोर्सपार"],
#     "पोटाश": ["पोटाश"],
  
#     "मैंगनीज": ["मैंगनीज"],
#     "चाँदी": ["चाँदी"],
#     "ग्रेफाइट": ["ग्रेफाइट"],
#     "बाक्साइट": ["बाक्साइट", "बॉक्साइट"],
#     "तांबा": ["तांबा", "कॉपर" , "ताँब", "ताम्र"],
#     "सीसा-जस्ता": ["सीसा", "लेड" , "जस्ता", "जिंक"],
#     "सोना": ["सोना", "गोल्ड" , "स्वर्ण" , "सोने"],
#     "लौह अयस्क": ["लौह", "अयस्क", "आयरन ओरे" , "लौह-अयस्क" , "लिग्नाइट" ,"लिग्नाईट" , "लोहा"],
#     "खनिज तेल": ["खनिज तेल", "मिनरल ऑयल"],
#     "नाइकेल": ["नाइकेल", "निकेल"],
#     "यूरेनियम": ["यूरेनियम"],
#     "पारा": ["पारा", "मरकरी"],
#     "अभ्रक": ["अभ्रक", "माइका"],
#     "कोबाल्ट": ["कोबाल्ट"],
#     "प्लेटिनम": ["प्लेटिनम"],

#     "टिन": ["टिन"],
#     "जिरकोन": ["जिरकोन"],
#     "चिलर": ["चिलर"],
#     "क्रोमाइट": ["क्रोमाइट"],

#     "ऐलुमिनियम": ["ऐलुमिनियम", "एल्युमिनियम", "अलुमिनियम" ,],
#     "बेंटोनाइट": ["बेंटोनाइट" , "बेन्टोनाइट", "बेन्टोनाइट", "बेण्टोनाइट"],
#     "डोलोमाइट": ["डोलोमाइट"],
#     "क्योलिन": ["क्योलिन", "चायनी क्ले"],

#     "सिलिमेनाइट": ["सिलिमेनाइट"],
#     "शिस्ट": ["शिस्ट"],
#   "तामड़ा": ["तामड़ा",    "गार्नेट"], 
 
#     "क्यायनाइट": ["क्यायनाइट"],
#     "टैल्क": ["टैल्क"],
#     "एस्बेस्टोस": ["एस्बेस्टोस" , "एस्बेस्टॉस" , "ऐस्बेस्टॉस", "ऐस्बेस्टोस"],
#     "बाराइट": ["बाराइट"],
#     "मैग्नेसाइट": ["मैग्नेसाइट"],
#     "चाइना क्ले": ["चाइना क्ले"],
#     "कलिनाइट": ["कलिनाइट"],
#     "डायस्पोर": ["डायस्पोर"],
#     "एमराल्ड": ["एमराल्ड"],

#     "रेड ऑक्साइड": ["रेड ऑक्साइड"],
#     "वर्मीक्युलाइट": ["वर्मीक्युलाइट"],
#     "जियोलाइट": ["जियोलाइट"],
#     "एंटिमनी": ["एंटिमनी"],
#     "गैलियम": ["गैलियम"],
#     "इंडियम": ["इंडियम"],

#     "रेडियोधर्मी खनिज": ["रेडियोधर्मी खनिज", "रेडियोएक्टिव मिनरल्स"],
#     "रेयर अर्थ एलिमेंट्स": ["रेयर अर्थ एलिमेंट्स"],
#     "सल्फर": ["सल्फर"],
#     "वोल्फ्रामाइट": ["वोल्फ्रामाइट"],
#     "वैनाडियम": ["वैनाडियम"],
#     "यिट्रियम": ["यिट्रियम"],
#     "जिंकाइट": ["जिंकाइट"],
#     "सोडियम सल्फेट": ["सोडियम सल्फेट"],
#     "अल्लुवियल सोना": ["अल्लुवियल सोना"],
#     "फुलर्स अर्थ": ["फुलर्स अर्थ"],
#     "हेमेटाइट": ["हेमेटाइट"],
#     "इल्मेनाइट": ["इल्मेनाइट"],
#     "सिल्वाइट": ["सिल्वाइट"],
#     "सिल्वेनाइट": ["सिल्वेनाइट"],
#     "स्टिबनाइट": ["स्टिबनाइट"],
#     "जाइरोक्सीन": ["जाइरोक्सीन"],
#     "अन्य पत्थर": ["पत्थर"],
#     "वोल्टस्टोनाइट":["वोल्टस्टोनाइट" , "वोलैस्टोनाइट", "वोलास्टोनाइट"],
#     "बेरीलियम":["बेरीलियम", "बेरिलियम"],
  
#     "फेल्सपार":["फेल्सपार"],
#     "बेराइटस":["बेराइटस"],

   
#     "क्वार्टज":["क्वार्टज" ,   "क्वार्टजाइट"],
#     "सेलेनाइट":["सेलेनाइट", "सैलेनाइट"],
#     "कैल्साइट":["कैल्साइट"],
#     "हीरे":["हीरे" , "हिरा"],

#     "जास्पर":["जास्पर"],
#     "थोरियम":["थोरियम"],
#     "पन्ना":["पन्ना", "पन्ने"],
#     "गैरू":["गैरू"],
#     "फास्फोराईट":["फास्फोराईट"],
#     "फ्लोराइट":["फ्लोराइट"],
#     "लिथियम":["लिथियम"],
#     "क्ले वाले खनिज":["क्ले", "फॉयर क्ल", "मुल्तानी मिट्टी", "फायरक्ले" , "बॉल क्ले" , "चीनी मिट्टी" , "सिलिका"],
#     "अन्य खनिज": [""]
# }


khanij = {
    "संगमरमर": ["संगमरमर", "मार्बल"],
    "ग्रेनाइट": ["ग्रेनाइट" , "ग्रेनाईट"],
    "चूना पत्थर": ["चूना पत्थर", "चूने" ,     "लाइम स्टोन",     "लाइमस्टोन"],
#     "पाइराइट्स": ["पाइराइट्स"],
    "तेल व गैस भंडार": ["तेल", "ऑयल" , "पेट्रोलियम" , "मीथेन" , "गैस"],
    "कोयला": ["कोयला"],

#     "रॉक फॉस्फेट": ["रॉक फॉस्फेट", "रॉक-फॉस्फेट", "रॉक फास्फेट"],
    "जिप्सम": ["जिप्सम"],
    "टंगस्टन": ["टंगस्टन"],

#     "घीया पत्थर":["घीया पत्थर", "सोप स्टोन"],
#     "फ्लोर्सपार": ["फ्लोर्सपार"],
#     "पोटाश": ["पोटाश"],
  
#     "मैंगनीज": ["मैंगनीज"],
#     "चाँदी": ["चाँदी"],
#     "ग्रेफाइट": ["ग्रेफाइट"],
#     "बाक्साइट": ["बाक्साइट", "बॉक्साइट"],
    "तांबा": ["तांबा", "कॉपर" , "ताँब", "ताम्र"],
    "सीसा-जस्ता": ["सीसा", "लेड" , "जस्ता", "जिंक"],
    "सोना": ["सोना", "गोल्ड" , "स्वर्ण" , "सोने"],
    "लौह अयस्क": ["लौह", "अयस्क", "आयरन ओरे" , "लौह-अयस्क" , "लिग्नाइट" ,"लिग्नाईट" , "लोहा"],
#     "खनिज तेल": ["खनिज तेल", "मिनरल ऑयल"],
#     "नाइकेल": ["नाइकेल", "निकेल"],
#     "यूरेनियम": ["यूरेनियम"],
#     "पारा": ["पारा", "मरकरी"],
#     "अभ्रक": ["अभ्रक", "माइका"],
#     "कोबाल्ट": ["कोबाल्ट"],
#     "प्लेटिनम": ["प्लेटिनम"],

#     "टिन": ["टिन"],
#     "जिरकोन": ["जिरकोन"],
#     "चिलर": ["चिलर"],
#     "क्रोमाइट": ["क्रोमाइट"],

#     "ऐलुमिनियम": ["ऐलुमिनियम", "एल्युमिनियम", "अलुमिनियम" ,],
#     "बेंटोनाइट": ["बेंटोनाइट" , "बेन्टोनाइट", "बेन्टोनाइट", "बेण्टोनाइट"],
#     "डोलोमाइट": ["डोलोमाइट"],
#     "क्योलिन": ["क्योलिन", "चायनी क्ले"],

#     "सिलिमेनाइट": ["सिलिमेनाइट"],
#     "शिस्ट": ["शिस्ट"],
  "तामड़ा": ["तामड़ा",    "गार्नेट"], 
 
#     "क्यायनाइट": ["क्यायनाइट"],
#     "टैल्क": ["टैल्क"],
#     "एस्बेस्टोस": ["एस्बेस्टोस" , "एस्बेस्टॉस" , "ऐस्बेस्टॉस", "ऐस्बेस्टोस"],
#     "बाराइट": ["बाराइट"],
#     "मैग्नेसाइट": ["मैग्नेसाइट"],
#     "चाइना क्ले": ["चाइना क्ले"],
#     "कलिनाइट": ["कलिनाइट"],
#     "डायस्पोर": ["डायस्पोर"],
#     "एमराल्ड": ["एमराल्ड"],

#     "रेड ऑक्साइड": ["रेड ऑक्साइड"],
#     "वर्मीक्युलाइट": ["वर्मीक्युलाइट"],
#     "जियोलाइट": ["जियोलाइट"],
#     "एंटिमनी": ["एंटिमनी"],
#     "गैलियम": ["गैलियम"],
#     "इंडियम": ["इंडियम"],

#     "रेडियोधर्मी खनिज": ["रेडियोधर्मी खनिज", "रेडियोएक्टिव मिनरल्स"],
#     "रेयर अर्थ एलिमेंट्स": ["रेयर अर्थ एलिमेंट्स"],
#     "सल्फर": ["सल्फर"],
#     "वोल्फ्रामाइट": ["वोल्फ्रामाइट"],
#     "वैनाडियम": ["वैनाडियम"],
#     "यिट्रियम": ["यिट्रियम"],
#     "जिंकाइट": ["जिंकाइट"],
#     "सोडियम सल्फेट": ["सोडियम सल्फेट"],
#     "अल्लुवियल सोना": ["अल्लुवियल सोना"],
#     "फुलर्स अर्थ": ["फुलर्स अर्थ"],
#     "हेमेटाइट": ["हेमेटाइट"],
#     "इल्मेनाइट": ["इल्मेनाइट"],
#     "सिल्वाइट": ["सिल्वाइट"],
#     "सिल्वेनाइट": ["सिल्वेनाइट"],
#     "स्टिबनाइट": ["स्टिबनाइट"],
#     "जाइरोक्सीन": ["जाइरोक्सीन"],
#     "अन्य पत्थर": ["पत्थर"],
#     "वोल्टस्टोनाइट":["वोल्टस्टोनाइट" , "वोलैस्टोनाइट", "वोलास्टोनाइट"],
#     "बेरीलियम":["बेरीलियम", "बेरिलियम"],
  
#     "फेल्सपार":["फेल्सपार"],
#     "बेराइटस":["बेराइटस"],

   
#     "क्वार्टज":["क्वार्टज" ,   "क्वार्टजाइट"],
#     "सेलेनाइट":["सेलेनाइट", "सैलेनाइट"],
#     "कैल्साइट":["कैल्साइट"],
#     "हीरे":["हीरे" , "हिरा"],

#     "जास्पर":["जास्पर"],
#     "थोरियम":["थोरियम"],
#     "पन्ना":["पन्ना", "पन्ने"],
#     "गैरू":["गैरू"],
#     "फास्फोराईट":["फास्फोराईट"],
#     "फ्लोराइट":["फ्लोराइट"],
#     "लिथियम":["लिथियम"],
#     "क्ले वाले खनिज":["क्ले", "फॉयर क्ल", "मुल्तानी मिट्टी", "फायरक्ले" , "बॉल क्ले" , "चीनी मिट्टी" , "सिलिका"],
    "अन्य खनिज": [""]
}



population = {
"साक्षरता":["साक्षर"],

"लिंगानुपात":["लिंगानुपात" , "स्त्री-पुरुष अनुपात" , "लिंगानपात" , "पुरूषों के अनुपात में महिलाओं की संख्या", "लिंग अनुपात"],
"घनत्व":["घनत्व"],

"अनुसूचित जनजाति":["जनजाति"],
"अनुसूचित जाति":["अनुसूचित जाति"],
"धर्मों":["धर्म" , "मुस्लिम" , "बौद्ध" , "जैन" , "हिन्दू", "ईसाई" , "सिक्ख" , "मस्लिम"],
"कार्यशील":["कार्यशील"],
"वृद्धि दर":["वृद्धि दर" , "वृद्धि दृदर" , "जनसंख्या वृद्धि" , "दशकीय परिवर्तन" , "वृद्धि" , "दशकीय वृद्धि"],
"ग्रामीण- नगरीय":["ग्रामीण" , "नगरीय" , "शहरी"],
# "कम - अधिक - कुल":["कम" , "अधिक" , "कुल" , "सर्वाधिक" , "आरोही" , "न्यूनतम"],
"अन्य जनगणना प्रश्न":["जनगणना", "2011" , "जनसंख्या", "आबादी", "जन्मदर" , "मृत्यु दर"],
"अन्य प्रश्न":[""]
}




fasal = {
    "पशुगणना":["पशुगणना" , "2019" , "पशु गणना", "पश गणना" , "पशु घनत्व", "पशु गणना"],
    "गधों":["गध"],
    "मछली":["मछली" , "मछलिया" , "मत्स्य", "मछलि"],
    "अश्व":["अश्व" , "खच्चर" , "घोड़े", "घोड़ा", "घोड़ों" , "टटू"],
    "ऊँट": ["ऊँट" , "ऊष्ट्र", "ऊंट", "ऊँट", "ऊंटों", "ऊंट"],
    "भैंस":["भैंस", "भैंस", "भैस", "भैंस", "मुर्रा"],
    "भेड़": ["भेड़", "भेंड़", "भेड़","भेड़", "भेड", "शीप"],
    "बकरी": ["बकरी" , "बकरि",],
    "गाय": ["गाय", "गौ" ,"कामधेनु", "गोवंश", "गोवंश", "गौवशं", "गायों", "गौवंश","कांकरेज", "राठी", "थारपारकर"],
    "मेला":["मेला" , "मेले", "मेलों"],
    "ऊन":["ऊन"],
    "डेयरी":["डेयरी" , "दुग्ध", "डेयरी"],
    "मुर्गि":["मुर्गि" , "मुर्गिया" , "मुर्गियों" , "मुर्गियाँ" , "अण्डा" , "मुर्गी", "अण्डों", "मुर्गे", "मुर्गा"],

    "राजस्थान में पशुपालन - अन्य प्रश्न":[""]
}


bhautik_bhubhag = {
    "संभाग":["संभाग" , "सम्भाग"],
    "भ्रंश":["भ्रंश"],
    "सीमा":["सीमा" , "स्पर्श" , "रेडक्लिफ" , "पड़ोसी" , "घिरा"],
    "003 भौगोलिक उपनाम व प्राचीन नाम":["नाम",  "का शहर","कहा गया", "शामिल","नाम दि",  "कहलाती" , "जाना जाता" , "कहलाता" ,"कहा जाता", "जाना जान" , "नाम से" , "कहते " , "कहलाती" ,"प्राचीन नाम", "कहलाते हैं" , "कहलाता" , "कहलाते हैं" , "कहलाते" , "कहलाते हैं"],


  "स्थिति":["स्थिति","सूर्योदय" "विस्तार" ,"गोलार्द्ध",  "दिशा", "अक्षांश" , "देशांतर" , "देशान्तर", "उत्तर से दक्षिण" , "दक्षिण से उत्तर" , "कर्क रेखा" , "सूर्यास्त" , "सूर्य की किरण" ,"सीधी किरण", "पूर्व से पश्चिम", "उत्तर में दक्षिण" ],
  "आकार":["आकार" , "आकृति" , "स्थलाकृति"],
  "क्षेत्रफल":["क्षेत्रफल" , "गुना" , "विकर्ण"],
  "निर्माण":["निर्माण" , "नया जिला"],
    "अरावली":["चोटी",  "पर्वतीय चोट","गुरू शिखर",  "पर्वत चोटि", "गुरूशिखर","गुरु शिखर","हाथीगुड़ा","तारागढ़","देसूरी",   "फुलवारी",  "दिलवाड़ा", "ऊँचाई के अनुसार","लसाड़िया","देशहरो","गुरुशिखर", "मेसा", "अरावली" , "आबू"  , "गिरवा" , "उड़िया" , "भोराठ" , "भोराट","भोमट" , "भाकर", "डूंगरी" ],
    "दक्षिण-पूर्वी पठार":["दक्षिणी पूर्वी पठारी", "दक्षिणी-पूर्वी पठारी", "दक्षिण पूर्वी पठार", "मालव","विन्ध्यन","विंध्यन", "दक्कन", "शाहबाद","दक्षिण-पूर्वी पठार"  , "हाड़ौती" , "मुकंदरा","मुकन्दरा", "ऊपरमाल", "सबसे छोटा भौतिक"],
    "पश्चिमी मरूस्थल":["बांगर",  "बांगड़", "नेहड़",   "मरूस्थल" , "रेत" ,"स्तुप" , "बालू" , "रेगिस्तान" , "स्तूप" , "मरुस्थल" , "गोड़वाड़","गौडवाड","गोडवाड़", "टीले" ,"लाठी", "थार", "अर्द्ध शुष्क", "कूबड़", "बालुका", "घग्घर" , "लुनी","लूनी" , "खड़ीन" , ],
    "पूर्वी मैदान":["डांग", "वागड़", "कांठल", "पूर्वी मैदान" ,"डाँग",  "छप्पन", "माही" , "बनास", "चम्बल" , "चंबल" , "बीहड़" , "बाणगंगा" , "उत्खात" , "पिंडमाट" , "मालपुरा"],
    "अन्य प्रशन":[""]
}




mahanyayvadi = {
    #     "समिति":["समिति"],
    #             "आपातकाल":["आपातकाल" , "वित्तीय आपात" , "आपात् स्थिति" , "अपातकाल"],
    #     "राजभाषा":["राजभाषा"], 
    # "लोक सभा अध्यक्ष":["लोकसभा अध्यक्ष" , "लोक सभा अध्यक्ष" , "स्पीकर" , ], 
    # "उप राष्ट्रपति":["उपराष्ट्रपति" , "उप राष्ट्रपति"],
    # "भारतीय सेवा":["भारतीय सेवा"],
    #         "केन्द्र शासित राज्य":["केन्द्र शासित राज्य"], 
    #             "महान्यायवादी":["महान्यायवादी" , "अटॉर्नी जनरल"],
    # "महाधिवक्ता":["महाधिवक्ता" , "एडवोकेट जनरल"],
    # "महालेखापरीक्षक":["महालेखापरीक्षक" , "महालेखा परीक्षक" , "नियंत्रक" , "कैग"],
    # "अंतर-राज्य":["अंतर-राज्य" , "अंतः राज्य"],
    #     "समवर्ती सूची":["समवर्ती सूची"],
    # "राज्य मानवाधिकार आयोग":["राज्य मानवाधिकार आयोग"],
    # "राज्य वित्त आयोग":["राज्य वित्त आयोग"],
    # "मुख्य सचिव":["मुख्य सचिव"],
    # "प्रधानमंत्री":["प्रधानमंत्री","प्रधानमंत्री" , "प्रधानमंत्रियों" , "प्रधान मंत्रियों" , "उप-प्रधान"],
    # "राष्ट्रपति शासन":["राष्ट्रपति शासन"],
            # "राज्यसभा":["राज्यसभा" , "राज्य सभा"],
    # "लोकसभा":["लोकसभा" , "लोक सभा"],


    # "संशोधन":["संशोधन"],
    # "संसद":["संसद" , "संयुक्त बैठक"],
    # "राष्ट्रपति":["राष्ट्रपति"],

    #    "उच्च न्यायालय":["उच्च न्यायालय" , "हाईकोर्ट"],
    # "सर्वोच्च न्यायालय":["सर्वोच्च न्यायालय" , "कोलेजिम" ,  "उच्चतम न्यायालय" , "सुप्रीम कोर्ट" , "न्यायाधीश" , "न्यायमू"],

    # "न्यायालय":["न्यायालय" , "न्यायिक समीक्षा" , "जनहित याचिका" , "न्यायपालिका" , "न्यायिक पुनरावलोकन" , "बनाम" , "न्यायिक सक्रियता"  , "पी.आई.एल." , "न्यायिक पुनरवलोकन" , "याचिक" , "रिट"] , 


     "done": [
    "समिति",
    "आपातकाल", "वित्तीय आपात", "आपात् स्थिति", "अपातकाल",
    "राजभाषा",
    "लोकसभा अध्यक्ष", "लोक सभा अध्यक्ष", "स्पीकर",
    "उपराष्ट्रपति", "उप राष्ट्रपति",
    "भारतीय सेवा",
    "केन्द्र शासित राज्य",
    "महान्यायवादी", "अटॉर्नी जनरल",
    "महाधिवक्ता", "एडवोकेट जनरल",
    "महालेखापरीक्षक", "महालेखा परीक्षक", "नियंत्रक", "कैग",
    "अंतर-राज्य", "अंतः राज्य",
    "समवर्ती सूची",
    "राज्य मानवाधिकार आयोग",
    "राज्य वित्त आयोग",
    "मुख्य सचिव",
    "प्रधानमंत्री", "प्रधानमंत्री", "प्रधानमंत्रियों", "प्रधान मंत्रियों", "उप-प्रधान",
    "राष्ट्रपति शासन",
    "राज्यसभा" , "राज्य सभा",
    "लोकसभा" , "लोक सभा",
    "संशोधन",
    "संसद" , "संयुक्त बैठक",
"राष्ट्रपति",
"न्यायालय" , "न्यायिक समीक्षा" , "जनहित याचिका" , "न्यायपालिका" , "न्यायिक पुनरावलोकन" , "बनाम" , "न्यायिक सक्रियता"  , "पी.आई.एल." , "न्यायिक पुनरवलोकन" , "याचिक" , "रिट",
"सर्वोच्च न्यायालय" , "कोलेजिम" ,  "उच्चतम न्यायालय" , "सुप्रीम कोर्ट" , "न्यायाधीश" , "न्यायमू",
"उच्च न्यायालय" , "हाईकोर्ट",
  ],





    "विधायिका":["विधायिका" , "व्यवस्थापिका" , "स्थगन प्रस्ताव"], 
       "राज्य विधानसभा":["विधानसभा"  , "विधानपरिषद्" , "विधान परिषद" , "विधानमंडल" , "विधान मंडल", "विधान सभा" , "राज्य असेंबली" , "विधानमण्डल", "राज्य विधान" , "दूसरा सदन" , "द्विसदनात्मक"],

    "राज्यपाल":["राज्यपाल" ],
    "मुख्यमंत्री":["मुख्यमंत्री" ],
    "मंत्रीपरिषद":["मंत्रीपरिषद" , "मंत्रि-परिषद" , "मंत्रिमंडल" , "मन्त्रिमण्डल" , "मंत्री परिषद" , "मंत्रिपरिषद"],
 
    "पंचायत":["पंचायत"],
 
    "आयोग":["आयोग"],




    "भाग":["भाग"],
    "अनुच्छेद":["अनुच्छेद"] , 

    "बजट":["बजट"],



}



combine_all = {
    "All":[""],
}



अधिकार = {

    "अधिकार":["अधिकार" ,"16", "निवारक निरोध","परमादेश",  "आरक्षण","पिछड़े वर्ग", "स्वतंत्रता","34", "32",   "17" ,"मूलाधिका","25",  "अस्पृश्यता" , "मौलिक स्वतन्त्रता" , "बन्दी प्रत्यक्षीकरण" , "याचिका" , "समानता" , "14" , "21A " , "18" , "19", "20" , "21" , "22" ],
    "कर्तव्य":["कर्तव्य", '51A' , "कर्त्तव्यों" , "कर्त्तव्य"],
    "नीति निर्देशक तत्व":["नीति निर्देशक तत्व" , "निर्देश" , "51"  , "निदेशक", "43" , "48"],
}


raajnitik_dal = {
        "दबाव समुह सिद्धांत":["वाइनर" ,"फाइनर" , "अज्ञात साम्राज्य" , "आमंड" , "आमण्ड" ,"बैन्टले", "शुम्पीटर",  "आलमंड" ,"पॉवेल", "बेन्टले",   "ब्लैण्डेल" , "ब्लॉन्डल"  , "ब्लोन्डेल" , "कोलमैन" ],
         "दबाव समूह":["दबाव समूह" ,"दबाब समूह" ,"प्रेशर ग्रुप्स" ,"महिला संगठन", "दबाव-समूह",  "व्यापार संघ" , "विद्यार्थी संगठन" , "किसान संगठन" , "उद्योग समूह" , "दबाव गुट"],
    "राजनीतिक दल":["दल-बदल" , "लेबर पार्टी",  "राजनीतिक दल" ,"कम्युनिस्ट पार्टी","दलीय-प्रणाली","साम्यवादी पार्टी", "राष्ट्रीय जनतांत्रिक गठबंधन", "संयुक्त मोर्चा सरकार",    "राजनीतिक दल",  "दलबदल",  "राष्ट्रीय काँग्रेस","क्षेत्रीय दल","बी.जे.पी.","भारतीय जनता पार्टी",  "राजनैतिक दल","राजनैतिक पार्टी","राजनीतिक दल", "राज्य स्तरीय दल",   "भारतीय जनता पार्टी", "कांग्रेस" , "गठबंधन सरकार" , "क्षेत्रीय पार्टि" , "राजनीतिक पार्टी" , "दल परिवर्तन" , "दल व्यवस्था" , "दलीय व्यवस्था"],

}


samvaidhanik_vikas = {
    "1919":["1919"],
    "1935":["1935"],
}


center_state_relations = {
    "1919":["1919"],
    "1935":["1935"],
    "संविधान सभा":["संविधान सभा" , "संविधान-सभा" , "प्रारूप समिति"],
    "samvaidhanik prakriya":["कैबिनेट मिशन" , "गोलमेज"],
    "उद्देशिका":["उद्देशिका" , "प्रस्तावना" , "मूल संरचना" , "केशवानन्द"],
    "नागरिकता":["नागरिकता"],

    "आपातकाल":["आपात" ,],

        "राष्ट्रपति शासन":["राष्ट्रपति शासन", ],
    # "अनुच्छेद 1":["अनुच्छेद 1" , "राज्यों का संघ" , "राज्यों के संघ" , "राज्यों का एक यूनियन" , "प्रथम अनुच्छेद" , "भारत तथा इंडिया"],

    "पंचायत":["पंचायत"  , "स्थानीय शासन"],
      "संघवाद":["संघवाद"  , "संघीय व्यवस्था" , "संघीय शासन" , "संघात्मक" , "संघ शासन प्रणाली" , "संघीय प्रणाली" , "केन्द्रीकरण"],
    
        "नये राज्य":["नये राज्य" ,"नए राज्य",  "राज्यों के गठन" , "नया राज्य" , "विलय"  , "सीमा", "राज्य को मिला" , "पुनर्गठन" , "वें राज्य"],
     "अन्तर्राज्यीय परिषद":["अन्तर्राज्यीय परिषद" , "अन्तर्राज्यीय परिषद" , "अंतरराज्यीय परिषद", "अंतरराज्यीय परिषद" , "क्षेत्रीय परिषद" , "अंतर राज्य परिषद" , "राष्ट्रीय एकता परिषद"],





"लोकायुक्त":["लोकायुक्त"],

            "अनुसूची":["अनुसूची" , "अनुसूचि"],
            "सूची":["संघ सूची" , "समवर्ती सूची" , "राज्य सूची"],
            
"संशोधन":["संशोधन"],

                "कश्मीर":["कश्मीर", "370"],

                # "अन्य प्रशन":[""],

    "संयुक्त अधिवेशन":["संयुक्त"],
    

"लोकतांत्रिक":["लोकत"],
"धर्मनिरपेक्ष":["धर्मनिरपेक्ष" , "पंथ निरपेक्षत" , "धर्म निरपेक्ष"],

  "संप्रभ":["संप्रभ"],
              "गणतंत्र:":["गणतंत्र" , "गणराज्य"],
                 "संसदीय सरकार":["संसदीय सरकार" , "सामुहिक उत्तरदायित्व" , "शासन प्रणाली" , "शासन-प्रणाली", "संसदीय शासन" , "संसदात्मक"],


    "अवशिष्ट":["अवशिष्ट"],



    "अंतरराज्यीय पानी":["पानी"],
  
    "विशेष प्रावधान":["विशेष प्रावधान" , "371"],



    "अन्य":[""],


       "अधिकार":["अधिकार" ,"16", "निवारक निरोध","परमादेश",  "आरक्षण","पिछड़े वर्ग", "स्वतंत्रता","34", "32",   "17" ,"मूलाधिका","25",  "अस्पृश्यता" , "मौलिक स्वतन्त्रता" , "बन्दी प्रत्यक्षीकरण" , "याचिका" , "समानता" , "14" , "21A " , "18" , "19", "20" , "21" , "22" ],
    "कर्तव्य":["कर्तव्य", '51A' , "कर्त्तव्यों" , "कर्त्तव्य"],
    "नीति निर्देशक तत्व":["नीति निर्देशक तत्व" , "निर्देश" , "51"  , "निदेशक", "43" , "48"],

            "दबाव समुह सिद्धांत":["वाइनर" ,"फाइनर" , "अज्ञात साम्राज्य" , "आमंड" , "आमण्ड" ,"बैन्टले", "शुम्पीटर",  "आलमंड" ,"पॉवेल", "बेन्टले",   "ब्लैण्डेल" , "ब्लॉन्डल"  , "ब्लोन्डेल" , "कोलमैन" ],
         "दबाव समूह":["दबाव समूह" ,"दबाब समूह" ,"प्रेशर ग्रुप्स" ,"महिला संगठन", "दबाव-समूह",  "व्यापार संघ" , "विद्यार्थी संगठन" , "किसान संगठन" , "उद्योग समूह" , "दबाव गुट"],
    "राजनीतिक दल":["दल-बदल" , "लेबर पार्टी",  "राजनीतिक दल" ,"कम्युनिस्ट पार्टी","दलीय-प्रणाली","साम्यवादी पार्टी", "राष्ट्रीय जनतांत्रिक गठबंधन", "संयुक्त मोर्चा सरकार",    "राजनीतिक दल",  "दलबदल",  "राष्ट्रीय काँग्रेस","क्षेत्रीय दल","बी.जे.पी.","भारतीय जनता पार्टी",  "राजनैतिक दल","राजनैतिक पार्टी","राजनीतिक दल", "राज्य स्तरीय दल",   "भारतीय जनता पार्टी", "कांग्रेस" , "गठबंधन सरकार" , "क्षेत्रीय पार्टि" , "राजनीतिक पार्टी" , "दल परिवर्तन" , "दल व्यवस्था" , "दलीय व्यवस्था"],
    "संबंध":["संबंध" , "सम्बन्ध" , "संघ-राज्य" , "केंद्र-राज्य" , "मध्य" , "विभाजन"],
        "आयोग":["आयोग" , "कमीशन"],

}


संसदीय = {
   "संसदीय सरकार":["संसदीय सरकार" , "सामुहिक उत्तरदायित्व" , "शासन प्रणाली"],
}


aayog = {
    "लोक सेवा आयोग":["सेवा आयोग"],
    "लोकपाल":["लोकपाल" , "लोक आयुक्त" , "ओमबुड्समैन" , "लोकायुक्त"],
    "मानवाधिकार":["मानवाधिकार" , "मानव अधिकार"  , "ह्यूमन"],
    "महिला आयोग":["महिला आयोग"],
    "सतर्कता आयोग":["सतर्कता आयोग"],
    "अल्पसंख्यक आयोग":["अल्पसंख्यक आयोग"]



}


mukhyamantri = {

    "मंत्रिपरिषद्":["मंत्रिपरिषद्" , "मंत्रिपरिषद" , "मन्त्रिपरिषद" , "मंत्रि-परिपद्" , "मंत्री परिषद्" , "मंत्रिमण्डल"],
    "मुख्यमंत्री":["मुख्यमंत्री" , "उपमुख्य" , "मुख्यमंत्रि" , "मूख्यमंत्री"]

}
segregate_question(input_folder, output_folder,  mukhyamantri, False )



# ratta_functions.process_folder_for_given_function(output_folder, output_folder, ratta_functions.convert_txt_to_docx, "files")
get_initial_idea_of_files_from_a_folder_recursively(input_folder)
get_initial_idea_of_files_from_a_folder_recursively(output_folder)

# ratta_functions.get_initial_idea_of_files_from_a_folder_recursively("/home/naresh/Work/Working/input done/03 राजस्थान भूगोल")
# ratta_functions.setup_logger("process.log")
# import Levenshtein
# docx_folder_1 = "/home/naresh/Data/npnpatidar/Shared/BOOKS/Naresh books content/Edited By Naresh/Women Supervisor Everything/Women Supervisor/03 राजस्थान पर विशेष बल के साथ भारतीय राजनीति और भारतीय अर्थशास्त्र/01 राजनीति"
# duplicates ,  to_be_deleted = ratta_functions.final_function_for_deduplication(input_folder)
# print( " Total duplicates = "  + str( duplicates) )
# print( " Total to be deleted = "+ str( to_be_deleted))

# from fuzzywuzzy import fuzz


# def find_similar_questions(file1, file2, threshold=80):
#     # Read questions from the first JSON file
#     with open(file1, 'r', encoding='utf-8') as f1:
#         questions_data1 = json.load(f1)

#     # Read questions from the second JSON file
#     with open(file2, 'r', encoding='utf-8') as f2:
#         questions_data2 = json.load(f2)

#     similar_questions = []

#     # Extract questions from each file
#     questions1 = [entry['question'] for entry in questions_data1]
#     questions2 = [entry['question'] for entry in questions_data2]

#     # Compare each question from file1 to each question from file2
#     for q1 in questions1:
#         for q2 in questions2:
#             similarity_score = fuzz.ratio(q1, q2)
#             if similarity_score >= threshold:
#                 similar_questions.append((q1, q2, similarity_score))

#     return similar_questions


# def levenshtein_similarity(question1, question2):
#     distance = Levenshtein.distance(question1, question2)
#     max_length = max(len(question1), len(question2))
#     similarity = 1 - (distance / max_length)
#     return similarity

# from sklearn.feature_extraction.text import CountVectorizer
# from sklearn.metrics.pairwise import cosine_similarity

# def cosine_similarity(question1, question2):
#     vectorizer = CountVectorizer().fit_transform([question1, question2])
#     vectors = vectorizer.toarray()
#     similarity = cosine_similarity(vectors)[0,1]
#     return similarity


# def dice_similarity(question1, question2):
#     set1 = set(question1)
#     set2 = set(question2)
#     intersection = len(set1.intersection(set2))
#     dice_coefficient = (2 * intersection) / (len(set1) + len(set2))
#     return dice_coefficient


# def hamming_similarity(question1, question2):
#     if len(question1) != len(question2):
#         raise ValueError("Both strings must be of equal length")
#     hamming_distance = sum(ch1 != ch2 for ch1, ch2 in zip(question1, question2))
#     max_length = max(len(question1), len(question2))
#     similarity = 1 - (hamming_distance / max_length)
#     return similarity


# from sklearn.feature_extraction.text import TfidfVectorizer

# def tfidf_similarity(question1, question2):
#     vectorizer = TfidfVectorizer()
#     vectors = vectorizer.fit_transform([question1, question2])
#     similarity = cosine_similarity(vectors)[0,1]
#     return similarity



# def sequence_matcher_similarity(question1, question2):
#     matcher = SequenceMatcher(None, question1, question2)
#     similarity = matcher.ratio()
#     return similarity



# def find_similar_questions(file1, file2, threshold=0.5):
#     # Read questions from the first JSON file
#     with open(file1, 'r', encoding='utf-8') as f1:
#         questions_data1 = json.load(f1)

#     # Read questions from the second JSON file
#     with open(file2, 'r', encoding='utf-8') as f2:
#         questions_data2 = json.load(f2)

#     similar_questions = []

#     # Extract questions from each file
#     questions1 = [entry['question'] for entry in questions_data1]
#     questions2 = [entry['question'] for entry in questions_data2]

#     # Compare each question from file1 to each question from file2
#     for q1 in questions1:
#         for q2 in questions2:
#             similarity_score = jaccard_similarity(q1, q2)
#             # similarity_score = levenshtein_similarity(q1, q2)
#             # similarity_score = cosine_similarity(q1, q2)
#             # similarity_score = dice_similarity(q1, q2)
#             # similarity_score = hamming_similarity(q1, q2)
#             # similarity_score = sequence_matcher_similarity(q1, q2)
        
            

#             if similarity_score >= threshold:
#                 similar_questions.append((q1, q2, similarity_score))

#     return similar_questions



# Example usage:
# file1 = '024 राजस्थान के लोक देवी देवता.json'
# file2 = '012 राजस्थान के लोकदेवता.json'
# threshold =.35
# similar_questions = find_similar_questions(file1, file2, threshold)



# write similar questions and their similarity scores
# with open("similarity.txt", 'w', encoding='utf-8') as f1:
#     for q1, q2, similarity_score in similar_questions:
#         f1.write(f"Question 1: {q1}")
#         f1.write(f"Question 2: {q2}")
#         f1.write(f"Similarity Score: {similarity_score}")
#         f1.write("\n\n")





# # function to convert  .docx file into .txt file using docx2txt
# def convert_docx_to_txt(input_file, output_file):
#     text = docx2txt.process(input_file)
#     with open(output_file, "w") as text_file:
#         text_file.write(text)

# # function to convert  .docx file into .txt file using pypandoc
# def convert_docx_to_txt_pypandoc(input_file, output_file):
#     # pypandoc.download_pandoc()
#     text = pypandoc.convert_file(input_file, 'latex')
#     with open(output_file, "w") as text_file:
#         text_file.write(text)

# # function to convert  .docx file into .txt file using python-docx
# def convert_docx_to_txt_python_docx(input_file, output_file):
#     doc = docx.Document(input_file)
#     text = '\n'.join([p.text for p in doc.paragraphs])
#     with open(output_file, "w") as text_file:
#         text_file.write(text)

# # convert_docx_to_txt("test.docx", "test.txt")

# convert_docx_to_txt_pypandoc("test.docx", "test1.txt")

# convert_docx_to_txt_python_docx("test.docx", "test2.txt")





# def latex_to_docx(input_file, output_file):
#     # Convert LaTeX text to plain text
#     text = pypandoc.convert_file(input_file, 'plain', format='latex')

#     # Create a new Document object
#     doc = docx.Document()

#     # Split text into paragraphs based on newline character
#     paragraphs = text.split('\n')

#     # Add paragraphs to the document
#     for paragraph_text in paragraphs:
#         # Add a new paragraph
#         paragraph = doc.add_paragraph()
#         # Add text to the paragraph
#         paragraph.add_run(paragraph_text)

#     # Save the document
#     doc.save(output_file)

# # Example usage:
# input_file = 'test1.txt'  # Path to the input LaTeX text file
# output_file = 'output.docx'  # Path to the output DOCX file
# latex_to_docx(input_file, output_file)

# ratta_functions.process_folder("/home/naresh/Desktop/Youth" , "Youth_Text_Files", ratta_functions.convert_docx_to_txt)
# ratta_functions.process_folder("Youth_Text_Files" , "Youth_Text_Files", ratta_functions.backend_insert_questions_separator)
# ratta_functions.process_folder("Youth_Text_Files" , "Youth_Text_Files", ratta_functions.convert_separated_file_to_json)

# ratta_functions.process_folder("/home/naresh/Desktop/FR" , "FR_Text_Files", ratta_functions.convert_docx_to_txt)
# ratta_functions.process_folder("FR_Text_Files" , "FR_Text_Files", ratta_functions.backend_insert_questions_separator)
# ratta_functions.process_folder("FR_Text_Files" , "FR_Text_Files", ratta_functions.convert_separated_file_to_json)


# def compare_json_files(file1_path, file2_path):
    # # Read JSON data from the files
    # file1_name = os.path.basename(file1_path)
    # file2_name = os.path.basename(file2_path)

    # with open(file1_path, 'r', encoding='utf-8') as file1:
    #     data1 = json.load(file1)
    # print(f"{len(data1) }   questions in {file1_name}")
    # with open(file2_path, 'r', encoding='utf-8') as file2:
    #     data2 = json.load(file2)
    # print(f"{len(data2) }   questions in {file2_name}")

    # # Find common objects
    # common_objects = [obj for obj in data1 if obj in data2]

    # # Find objects unique to each file
    # unique_to_file1 = [obj for obj in data1 if obj not in data2]
    # unique_to_file2 = [obj for obj in data2 if obj not in data1]

    # # Write common objects to a new file
    # with open('common_objects.json', 'w', encoding='utf-8') as common_file:
    #     json.dump(common_objects, common_file, indent=4, ensure_ascii=False)
    #     print(f"{len(common_objects)} common objects written to 'common_objects.json'")

    # # Write unique objects for file1 to a new file
    # with open('unique_to_' + file1_name + '.json', 'w', encoding='utf-8') as unique_file1:
    #     json.dump(unique_to_file1, unique_file1, indent=4, ensure_ascii=False)
    #     print(f"{len(unique_to_file1)} unique objects written to 'unique_to_file1.json'")

    # # Write unique objects for file2 to a new file
    # with open('unique_to_' + file2_name + '.json', 'w', encoding='utf-8') as unique_file2:
        # json.dump(unique_to_file2, unique_file2, indent=4, ensure_ascii=False)
        # print(f"{len(unique_to_file2)} unique objects written to 'unique_to_file2.json'")







# Create folder Structure from yaml file
# yaml_file = "/home/naresh/Desktop/Women Supervisor/folder_structure.yaml"
# output_folder = "/home/naresh/Desktop/womn"
# ratta_functions.create_folder_structure_from_yaml(yaml_file, output_folder)


# Save Folder Structure into yaml file
# folder = "/home/naresh/Data/npnpatidar/Shared/BOOKS/Naresh books content/Edited By Naresh/Women Supervisor Everything/Women Supervisor/01 भारतीय राष्ट्रीय आन्दोलन पर विशेष बल के साथ राजस्थान, भारतीय और विश्व इतिहास/02 भारत का इतिहास"
# folder1 = "/home/naresh/Desktop/02 भारत का इतिहास"
# ratta_functions.save_folder_structure_into_yaml( folder1, "women" , include_files = True)


# Compare Two Folder for duplication 
# docx_folder_1 = "/home/naresh/Desktop/History/Youth"
# docx_folder_2 = "/home/naresh/Desktop/History/GC" if not (('\\n' in question['question']) and ("सुमेल" not in question['question'] or "सूची-" not in question['question'])):
# ratta_functions.find_Ds_in_docx_folders_save_to_different_folders(docx_folder_1 , docx_folder_2)


#  Final Function to be used for deduplication
# folder1 = "/home/naresh/Desktop/02 भारत का इतिहास"
# # docx_folder = "/home/naresh/Downloads/GHATNA CHAKRA EDITED  HISTORY BY NISHA"

# ratta_functions.update_file_names_in_a_folder("/home/naresh/Desktop/YOUTH POLITY" , ["राजनितिक सिद्धान-" , "(Indian Government and Politics)" , "भारतीय शासन और राजनीति" , "(THE INDIAN ADMINSTRATION)" , "अंतर्राष्ट्रीय सम्बन्ध (Indian Foreign Policy an International Relations)"  , "राजनीतिक विचारक (POLITICAL THINKERS)" , "राजनितिक सिद्धान्त"])
# docx_folder_1 = "/home/naresh/Data/npnpatidar/Shared/BOOKS/Naresh books content/Edited By Naresh/Women Supervisor Everything/Women Supervisor"
# docx_folder_1 = "/home/naresh/Data/npnpatidar/Shared/BOOKS/Naresh books content/Edited By Naresh/Women Supervisor Everything/Women Supervisor/03 राजस्थान पर विशेष बल के साथ भारतीय राजनीति और भारतीय अर्थशास्त्र/01 राजनीति"
# duplicates ,  to_be_deleted = ratta_functions.final_function_for_deduplication(docx_folder_1)
# print( " Total duplicates = "  + str( duplicates) )
# print( " Total to be deleted = "+ str( to_be_deleted))



# get initial idea of folder 
# folder = "/home/naresh/women"
# ratta_functions.get_initial_idea_of_files_from_a_folder_recursively(docx_folder_1)


# with open('02 भारत का इतिहास.json') as f:
#     data = json.load(f)

# # # Visualize JSON as a mind map
# graph = ratta_functions.visualize_json(data)
# graph.render('json_mindmap', format='png', cleanup=True)

# # Convert JSON to XML
# xml_with_declaration = ratta_functions.json_to_xml(data)
# xml_with_declaration = '<?xml version="1.0" encoding="UTF-8"?>\n' + xml_data
# Save XML to a file





import os
from pdf2image import convert_from_path
from PIL import Image
import pypandoc

def convert_docx_to_pdf(input_docx, temp_pdf, pdf_engine='pdflatex'):
    """Convert DOCX to PDF using pypandoc."""
    pypandoc.convert_file(input_docx, 'pdf', outputfile=temp_pdf, extra_args=['--pdf-engine=' + pdf_engine])


def convert_pdf_to_images(temp_pdf):
    """Convert PDF to images using pdf2image."""
    return convert_from_path(temp_pdf, dpi=300)

def convert_images_to_pdf(images, final_pdf):
    """Convert images back to a non-searchable PDF."""
    images[0].save(final_pdf, save_all=True, append_images=images[1:], quality=100)

def cleanup(intermediate_files):
    """Remove intermediate files if they exist."""
    for f in intermediate_files:
        if os.path.exists(f):
            os.remove(f)

def main():
    input_docx = 'input.docx'
    temp_pdf = 'temp_output.pdf'
    final_pdf = 'final_output.pdf'

    try:
        convert_docx_to_pdf(input_docx, temp_pdf)
        images = convert_pdf_to_images(temp_pdf)

        # Convert the images back to a PDF
        convert_images_to_pdf(images, final_pdf)

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Clean up intermediate files
        cleanup([temp_pdf])

if __name__ == "__main__":
    main()

